package main

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func MessageHandler(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	switch {
	case update.Message.Text != "":
		HandleTextMessage(bot, update)
	case update.Message.Sticker != nil:
		HandleStickerMessage(bot, update)
	case update.Message.Photo != nil:
		HandlePhotoMessage(bot, update)
	case update.Message.Document != nil:
		HandleDocumentMessage(bot, update)
	case update.Message.Video != nil:
		HandleVideoMessage(bot, update)
	case update.Message.Voice != nil:
		HandleVoiceMessage(bot, update)
	case update.Message.Audio != nil:
		HandleAudioMessage(bot, update)
	case update.Message.VideoNote != nil:
		HandleVideoNoteMessage(bot, update)
	}
}

func HandleTextMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	text := strings.ToLower(msg.Text)

	var response string

	switch {
	case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") || strings.Contains(text, "start"):
		response = fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %s!", msg.From.FirstName)
	case strings.Contains(text, "–ø–æ–º–æ—â—å") || strings.Contains(text, "help"):
		response = "üÜò –ü–æ–º–æ—â—å: —è –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!"
	default:
		response = fmt.Sprintf("üìù –í—ã —Å–∫–∞–∑–∞–ª–∏: \"%s\"", msg.Text)
	}

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
func HandlePhotoMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	photo := msg.Photo[len(msg.Photo)-1] // –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ç–æ

	response := fmt.Sprintf("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –†–∞–∑–º–µ—Ä: %dx%dpx",
		photo.Width, photo.Height)

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
func HandleStickerMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	sticker := msg.Sticker

	response := fmt.Sprintf("üé≠ –°—Ç–∏–∫–µ—Ä! –≠–º–æ–¥–∑–∏: %s", sticker.Emoji)

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
func HandleDocumentMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	Document := msg.Document
	response := fmt.Sprintf("üé≠ –§–∞–π–ª!: %s", Document.FileID)

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è
func HandleVideoMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	Video := msg.Video
	response := fmt.Sprintf("üé≠ –§–∞–π–ª!: %s", Video.FileID)

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
func HandleVoiceMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	Voice := msg.Voice
	response := fmt.Sprintf("üé≠ –§–∞–π–ª!: %s", Voice.FileID)

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
func HandleAudioMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	Audio := msg.Audio
	response := fmt.Sprintf("üé≠ –§–∞–π–ª!: %s", Audio.FileID)

	sendMessage(bot, msg.Chat.ID, response)
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–∂–æ—á–∫–æ–≤
func HandleVideoNoteMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := update.Message
	VideoNote := msg.VideoNote
	response := fmt.Sprintf("üé≠ –§–∞–π–ª!: %s", VideoNote.FileID)

	sendMessage(bot, msg.Chat.ID, response)
}

// handleUnknownMessage - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
func HandleUnknownMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	sendMessage(bot, update.Message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
}

// sendMessage - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func sendMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
