name: Code Formatting Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  check-formatting:
    name: Check Go Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install goimports
      run: go install golang.org/x/tools/cmd/goimports@latest
      
    - name: Check formatting with gofmt
      id: gofmt-check
      run: |
        echo "üîç Checking code formatting with gofmt..."
        UNFORMATTED=$(gofmt -l .)
        if [ -n "$UNFORMATTED" ]; then
          echo "‚ùå Found unformatted files:"
          echo "$UNFORMATTED"
          echo ""
          echo "To fix, run: gofmt -w ."
          echo "$UNFORMATTED" > gofmt-unformatted.txt
          exit 1
        else
          echo "‚úÖ All files are properly formatted with gofmt"
        fi
        
    - name: Check imports with goimports
      id: goimports-check
      run: |
        echo "üîç Checking import formatting with goimports..."
        UNFORMATTED_IMPORTS=$(goimports -l .)
        if [ -n "$UNFORMATTED_IMPORTS" ]; then
          echo "‚ùå Found files with incorrect imports:"
          echo "$UNFORMATTED_IMPORTS"
          echo ""
          echo "To fix, run: goimports -w ."
          echo "$UNFORMATTED_IMPORTS" > goimports-unformatted.txt
          exit 1
        else
          echo "‚úÖ All imports are properly formatted with goimports"
        fi
          
    - name: Upload formatting details as artifact (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: formatting-details
        path: |
          gofmt-unformatted.txt
          goimports-unformatted.txt
        retention-days: 1

  auto-format-comment:
    name: Auto-Format Suggestion
    runs-on: ubuntu-latest
    needs: check-formatting
    if: failure() && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Apply formatting and create diff
      run: |
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        git add .
        git stash
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        gofmt -w .
        go install golang.org/x/tools/cmd/goimports@latest
        goimports -w .
        
        # –°–æ–∑–¥–∞–µ–º diff
        git add .
        git diff --staged > formatting.diff || echo "No changes"
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        git reset --hard HEAD
        git stash pop || true
        
    - name: Create review comment with formatting suggestions
      uses: actions/github-script@v6
      env:
        DIFF_CONTENT: ${{ steps.get-diff.outputs.diff }}
      with:
        script: |
          try {
            const diffContent = require('fs').readFileSync('formatting.diff', 'utf8');
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
                

            });
          } catch (error) {
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
                
