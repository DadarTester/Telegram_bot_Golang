name: Code Formatting Check

on:
  push:
    branches: [ main, base_bot_brunch ]
  pull_request:
    branches: [ main, base_bot_brunch ]

jobs:
  check-formatting:
    name: Check Go Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install goimports
      run: go install golang.org/x/tools/cmd/goimports@latest
      
    - name: Check formatting with gofmt
      id: gofmt-check
      run: |
        echo "üîç Checking code formatting with gofmt..."
        UNFORMATTED=$(gofmt -l .)
        if [ -n "$UNFORMATTED" ]; then
          echo "‚ùå Found unformatted files:"
          echo "$UNFORMATTED"
          echo ""
          echo "To fix, run: gofmt -w ."
          exit 1
        else
          echo "‚úÖ All files are properly formatted with gofmt"
        fi
        
    - name: Check imports with goimports
      id: goimports-check
      run: |
        echo "üîç Checking import formatting with goimports..."
        UNFORMATTED_IMPORTS=$(goimports -l .)
        if [ -n "$UNFORMATTED_IMPORTS" ]; then
          echo "‚ùå Found files with incorrect imports:"
          echo "$UNFORMATTED_IMPORTS"
          echo ""
          echo "To fix, run: goimports -w ."
          exit 1
        else
          echo "‚úÖ All imports are properly formatted with goimports"
        fi
          
    - name: Format and suggest fixes (on PR failure)
      if: failure() && github.event_name == 'pull_request'
      run: |
        echo "üõ†Ô∏è Applying formatting fixes for demonstration..."
        gofmt -w .
        goimports -w .
        
        # Show what would be changed
        git diff --name-only || true
        git diff || true
        
    - name: Upload formatting details as artifact (on failure)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: formatting-details
        path: |
          gofmt-output.txt
        retention-days: 1

  auto-format-comment:
    name: Auto-Format Suggestion
    runs-on: ubuntu-latest
    needs: check-formatting
    if: failure() && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Apply formatting
      run: |
        gofmt -w .
        go install golang.org/x/tools/cmd/goimports@latest
        goimports -w .
        
    - name: Get diff for comment
      id: get-diff
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || git diff --name-only)
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        
        # Get the actual diff
        DIFF_CONTENT=$(git diff || echo "No changes after formatting")
        # Escape for JSON
        DIFF_CONTENT_ESCAPED=$(echo "$DIFF_CONTENT" | python3 -c "import json,sys; print(json.dumps(sys.stdin.read()))")
        echo "diff=$DIFF_CONTENT_ESCAPED" >> $GITHUB_OUTPUT
        
    - name: Create review comment
      uses: actions/github-script@v6
      with:
        script: |
          const { files, diff } = process.env;
          const fileList = files.split('\n').filter(f => f).join('\n- ');
          const diffContent = JSON.parse(diff);
          
          github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            body: `## ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
          
            event: 'COMMENT'
          });
